import "BaseTypes.idl";
import "RemoteGuardCallIds.idl";

typedef enum {
    RemoteInvalidCredKey,        // reserved 
    RemoteIUMCredKey,            // reserved 
    RemoteDomainUserCredKey, 
    RemoteLocalUserCredKey,      // For internal use only - should never be present in MSV1_0_REMOTE_ENCRYPTED_SECRETS
    RemoteExternallySuppliedCredKey // reserved
} MSV1_0_REMOTE_CREDENTIAL_KEY_TYPE;

typedef struct {
    byte Data[8];
} NT_CHALLENGE;

typedef struct {
    byte Data[24];
} NT_RESPONSE;

typedef struct {
    byte Response[16];
    byte ChallengeFromClient[8];
} MSV1_0_LM3_RESPONSE;

typedef struct {
    byte Data[8];
} LM_SESSION_KEY;

typedef struct {
    byte Data[16];
} USER_SESSION_KEY;

typedef struct {
    byte Data[16];
} MSV1_0_NT_OWF_PASSWORD;

typedef struct {
    byte Data[16];
} MSV1_0_LM_OWF_PASSWORD;

typedef struct {
    byte Data[20];
} MSV1_0_SHA_OWF_PASSWORD;

typedef struct {
    byte Data[20];
} MSV1_0_REMOTE_CREDENTIAL_KEY;

typedef struct {
    char NtPasswordPresent;
    char LmPasswordPresent;
    char ShaPasswordPresent;
    MSV1_0_REMOTE_CREDENTIAL_KEY_TYPE CredentialKeyType;
    MSV1_0_REMOTE_CREDENTIAL_KEY CredentialKeySecret;
    unsigned int EncryptedSize;
    [size_is(EncryptedSize)] char* EncryptedSecrets;
} MSV1_0_REMOTE_ENCRYPTED_SECRETS, *PMSV1_0_REMOTE_ENCRYPTED_SECRETS;

typedef struct {
    char NtPasswordPresent;
    char LmPasswordPresent;
    char ShaPasswordPresent;
    MSV1_0_REMOTE_CREDENTIAL_KEY_TYPE CredentialKeyType;
    MSV1_0_REMOTE_CREDENTIAL_KEY CredentialKeySecret;
    MSV1_0_NT_OWF_PASSWORD NtOwfPassword;
    MSV1_0_LM_OWF_PASSWORD LmOwfPassword;
    MSV1_0_SHA_OWF_PASSWORD ShaOwfPassword;
} MSV1_0_REMOTE_PLAINTEXT_SECRETS, *PMSV1_0_REMOTE_PLAINTEXT_SECRETS;

[
    uuid(2cb7a1ea-8fe2-47ef-afb9-fa78216b4e44),
        version(1.0)
]
interface NtlmCredIsoRemote
{
    typedef struct _NtlmCredIsoRemoteInput
    {
        RemoteGuardCallId CallId;

        [switch_type(RemoteGuardCallId), switch_is(CallId)] union
        {
            // Used to negotiate the protocol version that will be used. Client sends that maximum version it supports; server replies with the version that will actually be used.
            [case(RemoteCallNtlmNegotiateVersion)] struct {
                unsigned int MaxSupportedVersion;
            } NegotiateVersion;

            // Request that the contents of this SECRETS_WRAPPER be encrypted.
            [case(RemoteCallNtlmProtectCredential)] struct {
                MSV1_0_REMOTE_PLAINTEXT_SECRETS* Credential;
            };

            // Use the provided credential and challenge to generate the NT and LM response for the NTLM v2 authentication protocol.
            [case(RemoteCallNtlmLm20GetNtlm3ChallengeResponse)] struct {
                MSV1_0_REMOTE_ENCRYPTED_SECRETS* Credential;
                IUM_UNICODE_STRING* UserName;
                IUM_UNICODE_STRING* LogonDomainName;
                IUM_UNICODE_STRING* ServerName;
                byte ChallengeToClient[8];
            } Lm20GetNtlm3ChallengeResponse;

            // Use the provided credential to calculate a response to this challenge according to the NTLM v1 protocol.
            [case(RemoteCallNtlmCalculateNtResponse)] struct {
                NT_CHALLENGE* NtChallenge;
                MSV1_0_REMOTE_ENCRYPTED_SECRETS* Credential;
            } CalculateNtResponse;

            // Use the provided credential and response to calculate a session key according to the NTLM v1 protocol.
            [case(RemoteCallNtlmCalculateUserSessionKeyNt)] struct {
                NT_RESPONSE* NtResponse;
                MSV1_0_REMOTE_ENCRYPTED_SECRETS* Credential;
            } CalculateUserSessionKeyNt;

            // Compare the provided credentials to determine whether they're identical.
            [case(RemoteCallNtlmCompareCredentials)] struct {
                MSV1_0_REMOTE_ENCRYPTED_SECRETS* LhsCredential;
                MSV1_0_REMOTE_ENCRYPTED_SECRETS* RhsCredential;
            } CompareCredentials;
        };

    } NtlmCredIsoRemoteInput, *PNtlmCredIsoRemoteInput;

    typedef struct _NtlmCredIsoRemoteOutput
    {
        RemoteGuardCallId CallId;
        int Status;

        [switch_type(RemoteGuardCallId), switch_is(CallId)] union 
        {
            [case(RemoteCallNtlmNegotiateVersion)] struct {
                unsigned int VersionToUse;
            } NegotiateVersion;

            [case(RemoteCallNtlmProtectCredential)] struct {
                MSV1_0_REMOTE_ENCRYPTED_SECRETS Credential;
            } ProtectCredential;

            [case(RemoteCallNtlmLm20GetNtlm3ChallengeResponse)] struct {
                unsigned short Ntlm3ResponseLength;
                [size_is(Ntlm3ResponseLength)] char* Ntlm3Response;
                MSV1_0_LM3_RESPONSE Lm3Response;
                USER_SESSION_KEY UserSessionKey;
                LM_SESSION_KEY LmSessionKey;
            } Lm20GetNtlm3ChallengeResponse;

            [case(RemoteCallNtlmCalculateNtResponse)] struct {
                NT_RESPONSE NtResponse;
            } CalculateNtResponse;

            [case(RemoteCallNtlmCalculateUserSessionKeyNt)] struct {
                USER_SESSION_KEY UserSessionKey;
            } CalculateUserSessionKeyNt;

            [case(RemoteCallNtlmCompareCredentials)] struct {
                IUM_BOOL AreNtOwfsEqual;
                IUM_BOOL AreLmOwfsEqual;
                IUM_BOOL AreShaOwfsEqual;
            } CompareCredentials;
        };

    } NtlmCredIsoRemoteOutput, *PNtlmCredIsoRemoteOutput;
}